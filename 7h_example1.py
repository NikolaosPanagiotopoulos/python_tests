#Σε αυτό το παράδειγμα θα φτιάξουμε μία εφαρμογή που θα πρέπει ο χρήστης
#να μαντέψει τις χώρες της ευρωπαϊκής ένωσης και τις πρωτεύουσες τους.
#Θα κάνουμε τον κώδικα με μορφή συναρτήσεων
#Θα αποθηκευεται η πρόοδος του παιχνιδιού με Save game. και μετά θα συνεχίσει το παιχνίδι
#με load game
#για κάθε σωστή απάντηση χώρας θα εμφανίζονται στον χρήστη 3 πόλεις της χώρας
#η ανάκτηση πόλεων θα γίνεται από ένα dataset csv με 43000 πόλεις

#####################
#Απαραίτητα imports
####################
import pickle
import os
#-----------------------------------------
#Συναρτήσεις
#-----------------------------------------
#συνάρτηση τυπώνει το αρχικό εισαγωγικό μήνυμα
def intro():
    print("Έναρξη")
#--------------------------------------
#εμφανίζει το βασικό μενου και επιστρέφει την επιλογή του χρήστη

def menu():
    print("\n Υπάρχουν 4 Επιλογές: Πληκτρολογήστε")
    print("---------------------------")
    print("Το όνομα ενός κράτους της ΕΕ για να ξεκινήσει το παιχνίδι")
    print("1 για να δεις πόσες χώρες έχεις βρει μέχρι τώρα")
    print("2 για να αποθηκευτεί η πρόοδος σου και έξοδος ώστε να συνεχίσεις αργότερα")
    print("3 έξοδος και προβολή των σωστών απαντήσεων")
    kratos=input("Δώστε μία επιλογή: ")
    if kratos == "1":
        return 1
    elif kratos=="2":
        return 2
    elif kratos=="3":
        return 3
    else:
        return kratos
#-------------------------------------
#δέχεται ως όρισμα μία συμβολοσειρά και
#επαληθεύει αν πρόκειται για σωστό κράτος
#αν ναι ζητάει την πρωτεύουσα από τον χρήστη
#καλεί και τη συνάρτηση για εκτύπωση των πόλεων
def check_answer(kratos):
    #έλεγχος αν υπάρχει το κράτος
    if kratos in eu:
        #Αν το κράτος υπάρχει, ζητάμε την πρωτεύουσα
        proteuousa=input("Ποιά είναι η πρωτεύουσα του κράτους; ")
        #έλεγχος αν είναι η σωστή πρωτεύουσα
        if eu[kratos]== proteuousa:
            #Διαγραφή του κράτους από το λεξικό
            eu.pop(kratos)
            #Εμφάνιση 3 πόλεων από το κράτος που βρήκε επιτυχώς ο χρήστης
            load_cities_csv(kratos,3)
            print("Σωστά! Κράτη που απομένουν να βρεις¨: ",len(eu))
        else:
            print("Σωστά βρήκες το κράτος αλλά έδωσες λάθος πρωτεύουσα ")
            print("Προσπάθησε ξανά")
    else:
        if kratos in eu_all:
            print("Σωστό το κράτος, το ίδιο το έχεις βρει σωστά και πιο πριν. Δοκίμασε ένα άλλο κράτος."\n)
        else:
            print("λάθος κράτος έδωσες - \n")
#--Η συνάρτηση τυπώνει όλες τις σωστές απαντήσεις
#ασχέτως με την πρόοδο του χρήστη
def view_all_countries():
    print("\n Πλήρης λίστα\n Κράτος - Πρωτεύσα")
    #εμφάνιση ολων των σωστών απαντήσεων
    for k in eu_all.keys():
        print(k,"_",eu_all[k])
    #αυτός ο βρόχος επανάληψης εμφανίζει όλα τα κλειδιά και τις τιμές του λεξικού
    #eu_all το οποίο περιέχει ολες τις σωστές απαντήσεις.
#-------------------------------------
#Η συνάρτηση ελέγχει για τυχόν αποθηκευμένα παιχνίδια
#ενημερώνει αντίστοιχα τον χρήστη για τις ενέργειες
#επιστρέφει είτε το αποθηκευμένο παιχνίδι είτε False αν δεν υπάρχει
#ή ο χρήστης θέλει να ξεκινήσει από την αρχή
def load_game():
    if os.path.exists("saved.game"):
        print("Βρέθηκε αποθηκευμένη προσπάθεια σου.")
        #Αμυντικός προγραμματισμός
        flag=0
        while flag==0:
            cont=input("Θες να την συνεχίσεις; (1=Ναι,2=όχι)")
            if cont=="1" or cont=="2":
                flag=1
        #Αν ο χρήστης θέλει να συνεχίσει το προηγούμενο παιχνίδι
        #Το φορτώνουμε από το pickle
        if cont=="1":
            f=open("saved.game","rb")
            #φόρτωση του λεξικού από την προηγούμενη φορά
            eu_load=pickle.load(f)
            f.close()
            print("Επιτυχής φόρτωση προηγούμενης προσπάθειας")
            print("Κράτη που απομένουν να βρεις:",len(eu_load))
            return eu_load
        #Διαφορετικά θα διαγράψουμε το αποθηκευμένο παιχνίδι
        #και ο χρήστης ξεκινάει ένα νέο από το μηδέν
        else:
            print("Το αποθηκευμένο παιχνίδι εχει διαγραφεί. Ξεκινάς από την αρχή")
            os.remove("saved.game")
            return False
    else:
        return False
#-------------------------------------
#Η συνάρτηση δέχεται ως όρισμα την τρέχουσα πρόοδο του χρήστη
#και την αποθηκεύει στον δίσκο ως pickle
def save_game(current_eu):
    f=open('saved.game','wb')
    pickle.dump(current_eu,f)
    f.close()
    print("η πρόοδος του παιχνιδιού αποθηκεύτηκε")
    print("αν τη φορτώσετε, θα συνεχίσετε από εκεί που σταματήσατε")
#-------------------------------------   
#Η συνάρτηση δέχεται ως όρισμα το όνομα μιας χώρας
#και των αριθμό των πόλεων που θα εμφανίσουμε για τη
#συγκεκριμένη χώρα
def load_cities_csv(user_country,num_cities):
    #δημιουργούμε ένα λεξικό που  περιλαμβάνει τις χώρες και πόλεις της ΕΕ
    #Θα αντλήσουμε την πληροφορία από το εξωτερικό αρχείο csv που αποθηκευσαμε στον
    #ίδιο φάκελο.
    eu_iso ={"Αυστρία" : "AT",
"Βέλγιο" : "BE",
"Βουλγαρία" : "BG",
"Κροατία" : "HR",
"Κύπρος" : "CY",
"Τσεχία" : "CZ",
"Δανία" : "DK",
"Εσθονία" : "EE",
"Φινλανδία" : "FI",
"Γαλλία" : "FR",
"Γερμανία" : "DE",
"Ελλάδα" : "GR",
"Ουγγαρία" : "HU",
"Ιρλανδία" : "IE",
"Ιταλία" : "IT",
"Λετονία" : "LV",
"Λιθουανία" : "LT",
"Λουξεμβούργο" : "LU",
"Μάλτα" : "MT",
"Ολλανδία" : "NL",
"Πολωνία" : "PL",
"Πορτογαλία" : "PT",
"Ρουμανία" : "RO",
"Σλοβακία" : "SK",
"Σλοβενία" : "SI",
"Ισπανία" : "ES",
"Σουηδία" : "SE"}
if os.path.exists('worldcities.csv'):
    #Ανάγνωση του αρχείου csv ως UTF-8
    worldcities=open('worldcities.csv','r',encoding='utf-8')
    lines=worldcities.readlines()
else:
    print("Το αρχείο με τα δεδομένα των πόλεων δεν βρέθηκε")
    return
print("Πόλεις του συγκεκριμένου κράτους πέραν της πρωτευουσας")
i=0
for line in lines:
    #χωρίζουμε τις γραμμές με βάση το κόμμα και εχουμε τις στήλες
    cols=line.split(",")
    #λαμβάνουμε τις στήλες που μας αφορούν
    country=cols[5].replace("\"","")
    city=cols[1].replace("\"","")
    is_capital=cols[8].replace("\"","")
    #Εμφάνιση πόλης για τη χώρα που ζητήθηκε
    if country==eu_iso[user_country] and is_capital != 'primary':
        i+=1
        print(city)
    #αν εμφανίστηκε το πλήθος πόλεων που ζητήθηκε τερματίζεται το loop
    if i==num_cities:
        break
#-------------------------------------
#Η συνάρτηση εμφανίζει στον χρήστη την τρέχουσα πρόοδο του
#δηλαδή τις χώρες που βρήκε ήδη για να μην βάλει ξανά τις ιδιες
def view_progress():
    #αρχικά δημιουργούμε μία κενή λίστα
    progress=[]
    #ελέγχουμε ποιες χώρες του λεξικού eu_all δεν υπάρχουν στο eu
    #αυτές που δεν υπάρχουν, εγιναν pop, άρα τις εχει ήδη βρει ο χρήστης
    for c in eu_all:
        #Αν η get δεν βρει τη χώρα, θα μας επιστρέψει μηδέν
        check=eu.get(c,0)
        if check==0:
            progress.append(c)
    if len(progress)==0:
        print("Δεν βρήκες καμία χώρα μέχρι στιγμής")
    else:
        print("Οι χώρες που έχεις βρει:")
        for f in progress:
            print(f)
#-------------------------------------
#----Κυρίως Πρόγραμμα---------------------------
#Εκτύπωση εισαγωγικού κειμένου
intro()
#Έλεγχος για αποθηκευμένο παιχνίδι
loaded_eu=load_game()

#Αν φορτώθηκε το παιχνίδι από τον δίσκο, το λεξικό eu
#Θα πρέπει να έχει λάβει τις τιμές του λεξικού που είχε αποθηκευτεί
if loaded_eu !=False:
    eu=loaded_eu.copy()

#αρχικοποιούμε την μεταβλητή option σε 0
#ώστε να τρέξει μία φορά η συνάρτηση menu()
option=0
while(option==0):
    #-------------Ο χρήστης βρήκε όλες τις απαντήσεις-----
    if len(eu)==0:
        print("Σωστά βρήκες όλα τα κράτη.Τέλος παιχνιδιού")
        break
    #_____________Ο χρήστης δεν έχει βρει όλες τις απαντήσεις
    #καλούμε το μενού
    if option==0:
        option=menu()
    #-----------Ο χρήστης επέλεξε το 1---------------
    #Αν το menu είναι option 1 ο χρήστης θα δει την πρόοδο του
    if option==1:
        view_progress()
        option=0
    #----------Ο χρήστης επέλεξε το 2---------------
    #Αν το menu είναι στο option 2 ο χρήστης θα κάνει αποθήκευση και
    #έξοδο χωρίς να δει απαντήσεις
    elif option==2:
         save_game(eu)
    #----------Ο χρήστης επέλεξε το 3---------------
    #Αν το menu είναι στο option 3 ο χρήστης ζήτησε ρητά έξοδο
    #και να εμφανίσει τις σωστές απαντήσεις.
    elif option==3:
        view_all_countries()    
    #----------Ο χρήστης επέλεξε κάτι διαφορετικό-----------       
    #αν ο χρήστης δε ζητήσει κάτι από τα παραπάνω προχωράμε
    #στον έλεγχο της εισόδου του
    else:
        check_answer(option)
        option=0
    

        
